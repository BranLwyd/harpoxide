#![allow(dead_code)] // TODO: remove, once everything is wired together

use crate::{proto::secret::Key, secret::Vault};
use prost::Message as _;
use std::fs;

mod config;
mod secret;
mod session;

// See prost-build crate documentation for information on why these includes are doing & why they
// are necessary. The incldued files are generated by the build script, build.rs, located in the
// root of the repository.
pub mod proto {
    pub mod harpd {
        include!(concat!(env!("OUT_DIR"), "/proto.harpd.rs"));
    }

    pub mod secret {
        include!(concat!(env!("OUT_DIR"), "/proto.secret.rs"));
    }
}

fn main() {
    sodiumoxide::init().unwrap();

    let key = {
        let key_bytes = fs::read("tests/assets/key.sbox").unwrap();
        Key::decode(key_bytes.as_ref()).unwrap()
    };
    let vault = Vault::new("tests/assets/passwords.sbox", key).unwrap();
    let store = vault.unlock("password").unwrap();
    for entry in store.list().unwrap() {
        println!("{}\n===\n{}===\n\n", entry, store.get(&entry).unwrap());
    }
}
